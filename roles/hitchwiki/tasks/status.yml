---
# Status report

- include_vars: "{{ dir.settings }}"

# Versions
- name: Fetching apache version
  shell: apachectl -V
  register: apache
- debug:
    var: apache.stdout_lines
  when: apache|succeeded

- name: Fetching php version
  shell: php -v
  register: php
- debug:
    var: php.stdout_lines
  when: php|succeeded

- name: Fetching npm version
  shell: npm --version
  register: npm
- debug:
    var: npm.stdout_lines
  when: npm|succeeded

- name: Fetching node version
  shell: nodejs --version
  register: nodejs
- debug:
    var: nodejs.stdout_lines
  when: nodejs|succeeded

- name: Fetching bower version
  shell: bower --version
  register: bower
- debug:
    var: bower.stdout_lines
  when: bower|succeeded

- name: Fetching openssl version
  shell: openssl version
  register: openssl
- debug:
    var: openssl.stdout_lines
  when: openssl|succeeded

- name: Fetching composer version
  shell: composer --version
  register: composer
- debug:
    var: composer.stdout_lines
  when: composer|succeeded

# Summary
- lineinfile:
    path: "{{ dir.settings }}"
    regexp: '^finished_installation'
    line: 'finished_installation: True'
  register: finished_installation
  when: finished_common_tasks and finished_db_tasks and finished_web_tasks and finished_mw_tasks

- shell: |
    {{dir.script}}/status.sh {{hostname}}
    echo "
    #######################################################################
    #                     - Hitchwiki is installed -                      #
    #                                                                     #
    # - Suspend the virtual machine by calling 'vagrant suspend'.         #
    # - When you're ready to begin working again, just run 'vagrant up'.  #
    # - To re-install, run 'vagrant destroy && vagrant up'.               #
    # - Read more at http://github.com/Hitchwiki/hitchwiki                #
    #                 Have fun and happy hacking!                         #
    #######################################################################
    "
  register: outro
  when: finished_installation|succeeded
- debug:
    var: outro.stdout_lines
  when: finished_installation|succeeded

- shell: |
    echo "Deployment on {{hostname}} is stuck:
    common: {{finished_common_tasks}} 
    db: {{finished_db_tasks}}
    web: {{finished_web_tasks}}
    mw: {{finished_mw_tasks}}"
  register: open_tasks
  when: finished_installation|skipped
- debug:
    var: open_tasks.stdout_lines
  when: finished_installation|skipped

...
